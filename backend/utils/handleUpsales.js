const shot = require('../utils/screenshotHelper');

function getExpectedUpsale({ upsales, profile, upsaleIndex, page }) {
    if (upsaleIndex === 1 && profile?.product?.quantity) {
        const upgradeName = `-upgrade-${profile.product.quantity}`;
        const found = upsales.find(u => u.name && u.name.includes(upgradeName));
        if (found) return found;
    }

    let url = page.url();
    let match = url.match(/upsale-(\d+)\.html/);
    let skuFromUrl = match ? match[1] : null;
    if (skuFromUrl) {
        const foundBySku = upsales.find(u => String(u.sku) === skuFromUrl);
        if (foundBySku) return foundBySku;
    }

    return upsales[upsaleIndex - 1] || null;
}

async function compareTitle({ page, expectedUpsale, upsaleIndex, log }) {
    let expectedTitle = expectedUpsale?.templates?.title || '';
    let titleStripped = expectedTitle.replace(/Upsell|Upgrade/gi, '').trim().toLowerCase();
    let actualTitle = (await page.title() || '').replace(/Upsell|Upgrade/gi, '').trim().toLowerCase();

    log(`--- [–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ø—Å–µ–π–ª–∞ #${upsaleIndex}] ---`);
    log(`–¢–∏–ø –∞–ø—Å–µ–π–ª–∞: ${upsaleIndex === 1 ? 'UPGRADE' : '–û–ë–´–ß–ù–´–ô'}`);
    log(`–û–∂–∏–¥–∞–µ–º—ã–π TITLE: "${titleStripped}"`);
    log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π TITLE (–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã): "${actualTitle}"`);
    if (expectedUpsale && actualTitle !== titleStripped) {
        log(`‚ùå [Check][#${upsaleIndex}] Title –Ω–µ —Å–æ–≤–ø–∞–ª! –û–∂–∏–¥–∞–ª–∏: "${titleStripped}", –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: "${actualTitle}"`);
    } else if (expectedUpsale) {
        log(`‚úÖ [Check][#${upsaleIndex}] Title —Å–æ–≤–ø–∞–ª`);
    } else {
        log(`‚ùå [Check][#${upsaleIndex}] –ù–µ –Ω–∞—à–ª–∏ –∞–ø—Å–µ–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!`);
    }
}

function compareSku({ expectedUpsale, postDataParsed, upsaleIndex, log, sendTestInfo, action }) {
    let expectedSku = expectedUpsale?.sku;
    const actualSku = postDataParsed['upsale[]'] || null;
    log(`–û–∂–∏–¥–∞–µ–º—ã–π SKU: ${String(expectedSku) === String(actualSku)
        ? `<span style="color:#33d033;font-weight:bold">${expectedSku}</span>`
        : `<span style="color:#c82d2d;font-weight:bold">${expectedSku}</span>`}`);
    log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π SKU (–∏–∑ ajax/add-upsale): ${String(expectedSku) === String(actualSku)
        ? `<span style="color:#33d033;font-weight:bold">${actualSku}</span>`
        : `<span style="color:#c82d2d;font-weight:bold">${actualSku}</span>`}`);
    if (String(expectedSku) === String(actualSku)) {
        log(`‚úÖ [Check][#${upsaleIndex}] SKU —Å–æ–≤–ø–∞–ª`);
    } else {
        log(`‚ùå [Check][#${upsaleIndex}] SKU –Ω–µ —Å–æ–≤–ø–∞–ª! –û–∂–∏–¥–∞–ª–∏: ${expectedSku}, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π (POST): ${actualSku}`);
    }
    if (typeof sendTestInfo === 'function') {
        sendTestInfo({
            _section: action === 1 ? 'YES' : 'NO',
            url: action === 1 ? 'ajax/add-upsale' : 'ajax/skip-upsells',
            data: { 'upsale[]': actualSku }
        });
    }
}


module.exports = async function handleUpsales(
    page, log, custom, sendTestInfo, checkStateAjax, firstUpsaleState, screenshotDir
) {
    let selectSchema = "1";
    if (custom && typeof custom === 'string' && custom.trim().length > 0) selectSchema = custom.trim();
    if (custom && typeof custom === 'object' && custom.customParam) selectSchema = custom.customParam;
    let actions = selectSchema.split('-').map(x => Number(x));
    const buyAll = !actions || actions.length <= 1;

    let upsaleIndex = 1;
    const maxUpsales = 10;
    const compareUpsales = (firstUpsaleState && firstUpsaleState.upsales) ? firstUpsaleState.upsales : [];
    const compareProfile = (firstUpsaleState && firstUpsaleState.profile) ? firstUpsaleState.profile : {};

    while (upsaleIndex < maxUpsales) {
        let currentUrl = page.url();
        if (/confirmation\.html/i.test(currentUrl)) {
            log('‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (confirmation.html), –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø—Å–µ–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            break;
        }
        if (compareUpsales.length < upsaleIndex) break;

        if (upsaleIndex === 1) {
            log(`üß™ –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ —Å –ø–µ—Ä–≤–æ–≥–æ –∞–ø—Å–µ–π–ª–∞ –Ω–∞ —á–µ–∫–∞—É—Ç...`);
            const urlBefore = page.url();
            await page.goBack();
            await page.waitForTimeout(1000);
            const urlAfter = page.url();
            if (urlAfter === urlBefore) {
                log(`‚úÖ [Check] –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤—Å—ë –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –∞–ø—Å–µ–π–ª–µ #1 (–û–ö)`);
            } else {
                log(`‚ùå [Check] –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ URL –∏–∑–º–µ–Ω–∏–ª—Å—è! –ë—ã–ª–æ: ${urlBefore}, —Å—Ç–∞–ª–æ: ${urlAfter}`);
            }
            await page.goForward();
            await page.waitForTimeout(350);
        }

        if (upsaleIndex > 1 && typeof checkStateAjax === 'function') {
            await checkStateAjax(page, log);
            const urlAfterState = page.url();
            if (/confirmation\.html/i.test(urlAfterState)) {
                log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ confirmation');
                break;
            }
            log(`üß™ –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–ø—Å–µ–π–ª–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π...`);
            const urlBefore = page.url();
            await page.goBack();
            await page.waitForTimeout(1000);
            const urlAfter = page.url();
            if (urlAfter === urlBefore) {
                log(`‚úÖ [Check] –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤—Å—ë –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –∞–ø—Å–µ–π–ª–µ #${upsaleIndex} (–û–ö)`);
            } else {
                log(`‚ùå [Check] –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ URL –∏–∑–º–µ–Ω–∏–ª—Å—è! –ë—ã–ª–æ: ${urlBefore}, —Å—Ç–∞–ª–æ: ${urlAfter}`);
            }
            await page.goForward();
            await page.waitForTimeout(350);
        }

        let action = 1;
        if (!buyAll) action = actions[upsaleIndex] ?? 0;
        let btnSelector = action === 1
            ? '.button_fixed .button__yes.u-button, .button__yes:not([style*="display:none"])'
            : '.button__no:not([style*="display:none"])';

        let btnHandle;
        try {
            btnHandle = await page.waitForSelector(btnSelector, { timeout: 6000, state: 'visible' });
        } catch {
            btnHandle = null;
        }
        if (!btnHandle) {
            log(`‚ùå –ù–µ—Ç –≤–∏–¥–∏–º–æ–π –∫–Ω–æ–ø–∫–∏ ${action === 1 ? 'YES' : 'NO'} –¥–ª—è –∞–ø—Å–µ–π–ª–∞ #${upsaleIndex}`);
            if (sendTestInfo) sendTestInfo({
                error: `–ù–µ—Ç –≤–∏–¥–∏–º–æ–π –∫–Ω–æ–ø–∫–∏ ${action === 1 ? 'YES' : 'NO'} –¥–ª—è –∞–ø—Å–µ–π–ª–∞ #${upsaleIndex}`
            });
            break;
        }

        if (screenshotDir) {
            log(`üü° [DEBUG] –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç upsale-${upsaleIndex}`);
            await shot(page, screenshotDir, `upsale-${upsaleIndex}`, log);
        }

        if (compareUpsales && compareUpsales.length) {
            const expectedUpsale = getExpectedUpsale({
                upsales: compareUpsales,
                profile: compareProfile,
                upsaleIndex,
                page
            });
            await compareTitle({ page, expectedUpsale, upsaleIndex, log });
        } else {
            log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö state –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è upsale #${upsaleIndex}`);
        }

        let postDataParsed = null;
        let expectedUpsale = null;

        // --- –û–ñ–ò–î–ê–ù–ò–ï ajax + –û–ñ–ò–î–ê–ù–ò–ï state + –ö–õ–ò–ö ---
        let request, stateResponse;
        const isYes = action === 1;
        const requestUrlPart = isYes ? '/ajax/add-upsale' : '/ajax/skip-upsells';
        try {
            [request, stateResponse] = await Promise.all([
                page.waitForRequest(req =>
                        req.method() === 'POST' && req.url().includes(requestUrlPart),
                    { timeout: 5000 }
                ),
                page.waitForResponse(res =>
                        res.url().includes('/ajax/state') && res.status() === 200,
                    { timeout: 5000 }
                ),
                btnHandle.click()
            ]);
        } catch (e) {
            log(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ø—Å–µ–π–ª #${upsaleIndex} (${isYes ? 'YES' : 'NO'})`);
            if (sendTestInfo) sendTestInfo({
                error: `–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ø—Å–µ–π–ª #${upsaleIndex} (${isYes ? 'YES' : 'NO'})`
            });
            break;
        }

        // --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö ---
        postDataParsed = {};
        if (request) {
            const postData = request.postData();
            try {
                const params = new URLSearchParams(postData);
                for (const [k, v] of params.entries()) postDataParsed[k] = v;
            } catch {
                postDataParsed = postData;
            }
        }

        if (compareUpsales && compareUpsales.length) {
            expectedUpsale = getExpectedUpsale({ upsales: compareUpsales, profile: compareProfile, upsaleIndex, page });
            compareSku({ expectedUpsale, postDataParsed, upsaleIndex, log, sendTestInfo, action });
        }

        log(`‚úîÔ∏è Upsale #${upsaleIndex}: ${isYes ? '–ö—É–ø–∏–ª–∏' : '–û—Ç–∫–ª–æ–Ω–∏–ª–∏'}`);
        log(`--------------------------`);

        await page.waitForTimeout(350);
        const afterUrl = page.url();

        // ---- –í–û–¢ –≠–¢–û–¢ –ö–£–°–û–ö ----
        if (/confirmation\.html/i.test(afterUrl)) {
            // –ñ–¥—ë–º state –¥–ª—è confirmation, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
            try {
                await page.waitForResponse(res =>
                        res.url().includes('/ajax/state') && res.status() === 200,
                    { timeout: 3000 }
                );
                log('üü¢ –ü–æ–π–º–∞–Ω state –Ω–∞ confirmation');
            } catch {
                log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å state –Ω–∞ confirmation!');
            }
            log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ confirmation');
            break;
        }
        // ---- /–ö–£–°–û–ö ----

        upsaleIndex++;
    }
};
