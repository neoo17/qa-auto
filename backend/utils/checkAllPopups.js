/**
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {string} partner
 */
module.exports = async function checkAllPopups(page, log, partner) {
    const allLinks = await page.$$('.modal-link');
    const visibleLinks = [];
    for (const link of allLinks) {
        const isVisible = await link.evaluate(el => {
            const style = window.getComputedStyle(el);
            return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;
        });
        if (isVisible) visibleLinks.push(link);
    }
    log(`DEBUG: –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–∏–º—ã—Ö .modal-link: ${visibleLinks.length}`);

    if (!visibleLinks.length) {
        log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∏–¥–∏–º–æ–π —Å—Å—ã–ª–∫–∏ .modal-link');
        return;
    }

    // === –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê AFFILIATES ===
    let affiliatesFound = false;
    for (const link of visibleLinks) {
        const found = await link.evaluate(el => {
            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (ul, ol, nav, div, section, footer, body)
            let parent = el.parentElement;
            while (parent && !['UL','OL','NAV','DIV','SECTION','FOOTER','BODY'].includes(parent.tagName)) {
                parent = parent.parentElement;
            }
            if (!parent) return false;
            // –ò—â–µ–º –≤–∏–¥–∏–º—É—é <a> —Å —Ç–µ–∫—Å—Ç–æ–º "Affiliates" –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            const a = Array.from(parent.querySelectorAll('a')).find(node => {
                if (!node.textContent) return false;
                const style = window.getComputedStyle(node);
                return (
                    style.display !== 'none' &&
                    style.visibility !== 'hidden' &&
                    node.offsetParent !== null &&
                    node.textContent.trim() === 'Affiliates'
                );
            });
            return !!a;
        });
        if (found) {
            affiliatesFound = true;
            break; // –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        }
    }

    if (partner === 'ga' || partner === 'gh') {
        if (affiliatesFound) {
            log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∏–¥–∏–º–∞—è —Å—Å—ã–ª–∫–∞ Affiliates ');
        } else {
            log('‚ùå –î–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ga/gh –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ Affiliates');
        }
    } else {
        if (affiliatesFound) {
            log('‚ùå –û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ Affiliates –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ' + partner);
        } else {
            log('‚úÖ –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ Affiliates –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ' + partner);
        }
    }

    // ---- –¥–∞–ª—å—à–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ –ø–æ–ø–∞–ø–∞–º ----
    for (let i = 0; i < visibleLinks.length; i++) {
        const link = visibleLinks[i];
        await link.evaluate(el => el.scrollIntoView({ behavior: "smooth", block: "center" }));
        const text = await link.evaluate(el => el.textContent.trim());
        log(`üñ± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –ø–æ —Å—Å—ã–ª–∫–µ: "${text}"`);
        await Promise.all([
            page.waitForSelector('.modal:visible, .modal[style*="display: block"]', { timeout: 5000 }),
            link.click(),
        ]);
        log('‚è≥ –ñ–¥—ë–º 1.2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞');
        await page.waitForTimeout(1200);

        const modalVisible = await page.$('.modal:visible, .modal[style*="display: block"]');
        if (modalVisible) {
            log('‚úÖ –ü–æ–ø–∞–ø –æ—Ç–∫—Ä—ã–ª—Å—è');
        } else {
            log('‚ùå –ü–æ–ø–∞–ø –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è');
            continue;
        }

        const closeBtn = await modalVisible.$('.close-modal');
        if (closeBtn) {
            log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞');
            await closeBtn.click();
            log('‚è≥ –ñ–¥—ë–º 1.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞');
            await page.waitForTimeout(1500);
            await page.waitForSelector('.modal:visible, .modal[style*="display: block"]', { state: 'hidden', timeout: 3000 });
            log('‚úÖ –ü–æ–ø–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª—Å—è');
        } else {
            log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ .close-modal –≤–Ω—É—Ç—Ä–∏ –ø–æ–ø–∞–ø–∞');
        }

        await page.waitForTimeout(600);
    }

    log('‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ø–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}
