/**
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {string} countryCode
 */
module.exports = async function checkShippingForm(page, log, countryCode) {
    const fieldsConfig = require('./fieldLabelsConfig.js');
    const SHIPPING_FIELDS = ['address', 'zipCode', 'city', 'state', 'country']; // country ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

    log('üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã #shipping-mobile...');
    await page.waitForSelector('form#shipping-mobile', { timeout: 7000 });

    log(`üåé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–π–±–ª—ã –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã shipping –¥–ª—è ${countryCode}`);
    const config = fieldsConfig[countryCode];
    if (!config) {
        log(`‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã "${countryCode}" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É`);
    } else {
        for (const name of SHIPPING_FIELDS) {
            if (!config[name]) continue;
            const { label, placeholder, type } = config[name];
            const isSelect = type === 'select';
            const inputSel = isSelect
                ? `form#shipping-mobile select[name="${name}"]`
                : `form#shipping-mobile input[name="${name}"]`;

            const isVisible = await page.$eval(inputSel, el => {
                const style = window.getComputedStyle(el);
                return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;
            }).catch(() => false);

            if (!isVisible) {
                log(`‚ÑπÔ∏è –ü–æ–ª–µ "${name}" —Å–∫—Ä—ã—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–µ–π–±–ª–∞/–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤/—Ç–∏–ø–∞`);
                continue;
            }

            if (isSelect && placeholder) {
                let optionText = null;
                try {
                    optionText = await page.$eval(`${inputSel} option`, el => el.textContent.trim());
                } catch {
                    optionText = null;
                }
                if (optionText !== placeholder) {
                    log(`‚ùå [select ${name}] –ü–µ—Ä–≤—ã–π option (placeholder) ‚Äî –æ–∂–∏–¥–∞–ª–∏ "${placeholder}", –ø–æ–ª—É—á–∏–ª–∏ "${optionText}"`);
                } else {
                    log(`‚úÖ [select ${name}] –ü–µ—Ä–≤—ã–π option —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${optionText}"`);
                }
            }

            let actualLabel = null;
            try {
                actualLabel = await page.$eval(`${inputSel} >> xpath=../../label`, el => el.textContent.trim());
            } catch {
                actualLabel = null;
            }
            if (actualLabel !== label) {
                log(`‚ùå Label –¥–ª—è "${name}" –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: "${label}", –ø–æ–ª—É—á–∏–ª–∏: "${actualLabel}"`);
            } else {
                log(`‚úÖ Label –¥–ª—è "${name}" —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${label}"`);
            }

            if (!isSelect) {
                let actualPlaceholder = null;
                try {
                    actualPlaceholder = await page.$eval(inputSel, el => el.getAttribute('placeholder'));
                } catch {
                    actualPlaceholder = null;
                }
                if (actualPlaceholder !== placeholder) {
                    log(`‚ùå Placeholder –¥–ª—è "${name}" –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: "${placeholder}", –ø–æ–ª—É—á–∏–ª–∏: "${actualPlaceholder}"`);
                } else {
                    log(`‚úÖ Placeholder –¥–ª—è "${name}" —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${placeholder}"`);
                }
            }

            if (!isSelect) {
                let actualType = null;
                try {
                    actualType = await page.$eval(inputSel, el => el.getAttribute('type'));
                } catch {
                    actualType = null;
                }
                if (actualType !== type) {
                    log(`‚ùå Type –¥–ª—è "${name}" –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: "${type}", –ø–æ–ª—É—á–∏–ª–∏: "${actualType}"`);
                } else {
                    log(`‚úÖ Type –¥–ª—è "${name}" —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${type}"`);
                }
            }
        }
    }

    log('üö´ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—É—é shipping —Ñ–æ—Ä–º—É...');
    await page.click('form#shipping-mobile button[type="submit"]');
    await page.waitForTimeout(800);
    let stillHere = await page.isVisible('form#shipping-mobile');
    if (stillHere) {
        log('‚úÖ Shipping —Ñ–æ—Ä–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç (required)');
    } else {
        log('‚ùå Shipping —Ñ–æ—Ä–º–∞ –∏—Å—á–µ–∑–ª–∞ ‚Äî –±–∞–≥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É—Å—Ç–æ–π shipping —Ñ–æ—Ä–º—ã');
    }

    log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é shipping —Ñ–æ—Ä–º—É —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏');
    for (const name of SHIPPING_FIELDS) {
        if (!config[name]) continue;
        const { type } = config[name];
        const isSelect = type === 'select';
        const inputSel = isSelect
            ? `form#shipping-mobile select[name="${name}"]`
            : `form#shipping-mobile input[name="${name}"]`;

        const isVisible = await page.$eval(inputSel, el => {
            const style = window.getComputedStyle(el);
            return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;
        }).catch(() => false);

        if (!isVisible) continue;


        if (isSelect && name === 'state') {

            const customDropdownSelect = await page.$('form#shipping-mobile .dropdown .dropdown-select');
            if (customDropdownSelect) {
                log('‚ö°Ô∏è [state] –ö–∞—Å—Ç–æ–º–Ω—ã–π select (dropdown), –≤—ã–±–∏—Ä–∞–µ–º —à—Ç–∞—Ç —á–µ—Ä–µ–∑ .dropdown-menu-item');
                await customDropdownSelect.click();
                await page.waitForSelector('form#shipping-mobile .dropdown-menu', { timeout: 2500 });
                await page.waitForTimeout(200);
                const toPick = await page.$('form#shipping-mobile .dropdown-menu-item:not(.is-select)[data-value]');
                if (toPick) {
                    const value = await toPick.getAttribute('data-value');
                    const text = await toPick.evaluate(el => el.textContent.trim());
                    await toPick.click();
                    log(`‚úÖ [state] –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É —à—Ç–∞—Ç—É: ${text}`);
                } else {
                    log('‚ùå [state] –ù–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ç–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º dropdown!');
                }
            } else {
                // –û–±—ã—á–Ω—ã–π select
                log('üü¢ [state] –û–±—ã—á–Ω—ã–π select, –≤—ã–±–∏—Ä–∞–µ–º —à—Ç–∞—Ç —á–µ—Ä–µ–∑ .selectOption');
                const stateOptions = await page.$$eval(inputSel + ' option', opts => opts.map(o => o.value).filter(Boolean));
                if (stateOptions.length >= 1) {
                    await page.selectOption(inputSel, stateOptions[0]);
                    await page.$eval(inputSel, el => {
                        el.dispatchEvent(new Event('change', { bubbles: true }));
                    });
                    const currentValue = await page.$eval(inputSel, el => el.value);
                    log(`‚úÖ [state] –í—ã–±—Ä–∞–ª–∏ —à—Ç–∞—Ç "${stateOptions[0]}" –≤ –æ–±—ã—á–Ω–æ–º select`);
                } else {
                    log('‚ùå [state] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –æ–±—ã—á–Ω–æ–º select!');
                }
            }
        } else if (isSelect) {
            continue;
        } else {
            await page.fill(inputSel, 'test');
        }
    }

    log('üü¢ –¢–µ—Å—Ç shipping —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à—ë–Ω');
};
