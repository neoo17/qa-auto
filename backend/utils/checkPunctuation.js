/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞–ª–∏
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {string} countryCode
 */
module.exports = async function checkPunctuation(page, log, countryCode) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π
    const localeRules = {
        // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –ª–æ–∫–∞–ª–∏ (–∫—Ä–æ–º–µ CA_FR) - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ ! ? : ; %
        fr: { needSpace: ['!', '?', ':', ';', '%'], message: '–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã' },
        ch_fr: { needSpace: ['!', '?', ':', ';', '%'], message: '–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã' },
        
        // –ö–∞–Ω–∞–¥—Å–∫–∞—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ª–æ–∫–∞–ª—å - –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ ! ? : ; %
        ca_fr: { needSpace: [], noSpace: ['!', '?', ':', ';', '%'], message: '–ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã' },
        
        // –ì–µ—Ä–º–∞–Ω—Å–∫–∏–µ –∏ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–µ –ª–æ–∫–∞–ª–∏ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ %
        de: { needSpace: ['%'], message: '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ %' },
        ch_de: { needSpace: ['%'], message: '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ %' },
        se: { needSpace: ['%'], message: '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ %' },
        no: { needSpace: ['%'], message: '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ %' },
        fi: { needSpace: ['%'], message: '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ %' },
        is: { needSpace: ['%'], message: '–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ %' }
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å
    const rules = localeRules[countryCode];
    if (!rules) {
        log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ (–ª–æ–∫–∞–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${countryCode})`);
        return;
    }

    log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏ ${countryCode}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const textContent = await page.evaluate(() => {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const textNodes = [];
        const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            null,
            false
        );
        
        let node;
        while (node = walker.nextNode()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã
            if (node.textContent.trim() && 
                !['SCRIPT', 'STYLE'].includes(node.parentElement.tagName)) {
                textNodes.push(node.textContent);
            }
        }
        return textNodes;
    });

    let errors = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
    textContent.forEach(text => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ (–∫–æ–≥–¥–∞ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)
        if (rules.needSpace && rules.needSpace.length > 0) {
            rules.needSpace.forEach(symbol => {
                const regex = new RegExp(`\\w[${symbol}]`, 'g');
                const matches = text.match(regex);
                if (matches) {
                    matches.forEach(match => {
                        errors.push({
                            symbol,
                            context: text.substring(
                                Math.max(0, text.indexOf(match) - 20),
                                Math.min(text.length, text.indexOf(match) + 20)
                            ).trim(),
                            type: 'missing'
                        });
                    });
                }
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ (–∫–æ–≥–¥–∞ –∏—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
        if (rules.noSpace && rules.noSpace.length > 0) {
            rules.noSpace.forEach(symbol => {
                const regex = new RegExp(`\\s[${symbol}]`, 'g');
                const matches = text.match(regex);
                if (matches) {
                    matches.forEach(match => {
                        errors.push({
                            symbol,
                            context: text.substring(
                                Math.max(0, text.indexOf(match) - 20),
                                Math.min(text.length, text.indexOf(match) + 20)
                            ).trim(),
                            type: 'extra'
                        });
                    });
                }
            });
        }
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (errors.length === 0) {
        const symbolsList = rules.needSpace?.length > 0 ? 
            rules.needSpace.join(', ') : 
            rules.noSpace.join(', ');
        log(`‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (${symbolsList}) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª–∞–º –ª–æ–∫–∞–ª–∏ ${countryCode}`);
    } else {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        const groupedErrors = {};
        errors.forEach(err => {
            if (!groupedErrors[err.symbol]) {
                groupedErrors[err.symbol] = [];
            }
            groupedErrors[err.symbol].push(err.context);
        });
        
        // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ª–æ–≥–µ –æ—à–∏–±–æ–∫
        log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏:`);
        
        // –í—ã–≤–æ–¥–∏–º –¥–æ 3 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        Object.keys(groupedErrors).forEach(symbol => {
            const examples = groupedErrors[symbol].slice(0, 3);
            log(`‚ùå –°–∏–º–≤–æ–ª "${symbol}" (${groupedErrors[symbol].length} –æ—à–∏–±–æ–∫):`);
            examples.forEach(ex => {
                log(`‚ùå   - "${ex}"`);
            });
            if (groupedErrors[symbol].length > 3) {
                log(`‚ùå   ... –∏ –µ—â–µ ${groupedErrors[symbol].length - 3} –ø—Ä–∏–º–µ—Ä–æ–≤`);
            }
        });
    }
};