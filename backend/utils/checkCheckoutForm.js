/**
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {Function} [sendTestInfo]
 * @param {Function} [checkStateAjax]
 * @param {string} checkType
 */
module.exports = async function checkCheckoutForm(page, log, sendTestInfo, checkStateAjax, checkType) {
    log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É #checkout...');
    await page.waitForSelector('form#checkout', { timeout: 7000 });

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ "retry" (cvv: 000)
    log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "retry" (cvv: 000)...');
    await page.fill('input[name="cardNumber"]', '4716934807660821');
    await page.selectOption('select[name="expMonth"]', '01');
    await page.selectOption('select[name="expYear"]', '2030');
    await page.fill('input[name="cvv"]', '000');

    const [retryRequest, retryResponse] = await Promise.all([
        page.waitForRequest(req =>
            req.method() === 'POST' && req.url().includes('/order'), { timeout: 4000 }
        ),
        page.waitForResponse(res =>
            res.url().includes('/order') && res.request().method() === 'POST', { timeout: 4000 }
        ),
        page.click('form#checkout button[type="submit"]')
    ]);
    let retryJson = {};
    try { retryJson = await retryResponse.json(); } catch {}
    if (retryJson.data?.processing === "retry") {
        log('‚úÖ –°—Ç–∞—Ç—É—Å processing: "retry" –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
        log(`‚ùå –û–∂–∏–¥–∞–ª–∏ processing: "retry", –ø–æ–ª—É—á–∏–ª–∏: "${retryJson.data?.processing}"`);
    }

    if (checkType === 'full'){
        // AmEx
        log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º AmEx...');
        await page.fill('input[name="cardNumber"]', '378282246310005');
        await page.selectOption('select[name="expMonth"]', '01');
        await page.selectOption('select[name="expYear"]', '2030');
        await page.fill('input[name="cvv"]', '123');
        const [amexResp] = await Promise.all([
            page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 4000 }
            ),
            page.click('form#checkout button[type="submit"]')
        ]);
        let amexJson = {};
        try { amexJson = await amexResp.json(); } catch {}
        const amexErr = amexJson.fieldErrors?.[0]?.error || '';
        if (amexErr.includes('amex credit card is not allowed')) {
            log(`‚úÖ AmEx –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω ‚Äî –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${amexErr}"`);
        } else {
            log(`‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É –¥–ª—è AmEx: "${amexErr}"`);
        }

        // Diners Club
        log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º Diners Club...');
        await page.fill('input[name="cardNumber"]', '30569309025904');
        await page.selectOption('select[name="expMonth"]', '01');
        await page.selectOption('select[name="expYear"]', '2030');
        await page.fill('input[name="cvv"]', '123');
        const [dinersResp] = await Promise.all([
            page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 4000 }
            ),
            page.click('form#checkout button[type="submit"]')
        ]);
        let dinersJson = {};
        try { dinersJson = await dinersResp.json(); } catch {}
        const dinersErr = dinersJson.fieldErrors?.[0]?.error || '';
        if (dinersErr.includes('diners club carte blanche credit card is not supported')) {
            log(`‚úÖ Diners Club –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${dinersErr}"`);
        } else {
            log(`‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É –¥–ª—è Diners Club: "${dinersErr}"`);
        }

        // Discover
        log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º Discover...');
        await page.fill('input[name="cardNumber"]', '6011111111111117');
        await page.selectOption('select[name="expMonth"]', '01');
        await page.selectOption('select[name="expYear"]', '2030');
        await page.fill('input[name="cvv"]', '123');
        const [discoverResp] = await Promise.all([
            page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 4000 }
            ),
            page.click('form#checkout button[type="submit"]')
        ]);
        let discoverJson = {};
        try { discoverJson = await discoverResp.json(); } catch {}
        const discoverErr = discoverJson.fieldErrors?.[0]?.error || '';
        if (discoverErr.includes('discover credit card is not allowed')) {
            log(`‚úÖ Discover –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω ‚Äî –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${discoverErr}"`);
        } else {
            log(`‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É –¥–ª—è Discover: "${discoverErr}"`);
        }

        // JCB
        log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º JCB...');
        await page.fill('input[name="cardNumber"]', '3530111333300000');
        await page.selectOption('select[name="expMonth"]', '01');
        await page.selectOption('select[name="expYear"]', '2030');
        await page.fill('input[name="cvv"]', '123');
        const [jcbResp] = await Promise.all([
            page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 4000 }
            ),
            page.click('form#checkout button[type="submit"]')
        ]);
        let jcbJson = {};
        try { jcbJson = await jcbResp.json(); } catch {}
        const jcbErr = jcbJson.fieldErrors?.[0]?.error || '';
        if (jcbErr.includes('jcb credit card is not supported')) {
            log(`‚úÖ JCB –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${jcbErr}"`);
        } else {
            log(`‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É –¥–ª—è JCB: "${jcbErr}"`);
        }
    }


    log('‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É...');
    await page.fill('input[name="cardNumber"]', '4716934807660821');
    await page.selectOption('select[name="expMonth"]', '01');
    await page.selectOption('select[name="expYear"]', '2030');
    await page.fill('input[name="cvv"]', '123');
    log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: 4716 9348 0766 0821, 01/2030, cvv 123');

    const [request, upsaleState] = await Promise.all([
        page.waitForRequest(req =>
            req.method() === 'POST' && req.url().includes('/order'), { timeout: 4000 }
        ),
        (async () => {
            const state = await checkStateAjax(page, log);
            if (state) log('üü¢ State –ø–æ–ª—É—á–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–ø—Å–µ–π–ª–µ!');
            else log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å state –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–ø—Å–µ–π–ª–µ!');
            return state;
        })(),
        page.click('form#checkout button[type="submit"]'),
        page.waitForNavigation({
            url: url => /\/upsale-\d+\.html/i.test(url),
            waitUntil: 'load',
            timeout: 12000
        })
    ]);

    if (request) {
        let postDataParsed = {};
        const postData = request.postData();
        if (postData) {
            try {
                const params = new URLSearchParams(postData);
                for (const [k, v] of params.entries()) postDataParsed[k] = v;
            } catch (e) {
                postDataParsed = postData;
            }
        }
        if (sendTestInfo) {
            sendTestInfo({
                _section: 'Checkout POST ajax/order',
                data: postDataParsed
            });
        }
        log('‚úÖ POST ajax/order –Ω–∞ —á–µ–∫-–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
        log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å ajax-–∑–∞–ø—Ä–æ—Å –Ω–∞ /order –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã checkout!');
        if (sendTestInfo) {
            sendTestInfo({
                error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å POST ajax/order –Ω–∞ —á–µ–∫–∞—É—Ç–µ!'
            });
        }
        return;
    }

    const currentUrl = page.url();
    if (/\/upsale-\d+\.html/i.test(currentUrl)) {
        log(`‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –∞–ø—Å–µ–π–ª: ${currentUrl}`);
    } else {
        log('‚ùå –ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –∞–ø—Å–µ–π–ª-—Å—Ç—Ä–∞–Ω–∏—Ü—É!');
        if (sendTestInfo) {
            sendTestInfo({
                error: '‚ùå –ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –∞–ø—Å–µ–π–ª-—Å—Ç—Ä–∞–Ω–∏—Ü—É!'
            });
        }
    }
};
