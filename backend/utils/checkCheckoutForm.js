/**
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {Function} [sendTestInfo]
 * @param {Function} [checkStateAjax]
 * @param {string} checkType
 */
module.exports = async function checkCheckoutForm(page, log, sendTestInfo, checkStateAjax, checkType) {
    log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É #checkout...');
    await page.waitForSelector('form#checkout', { timeout: 7000 });

    page.on('pageerror', err => log('[JS error] ' + err));
    page.on('console', msg => {
        if (msg.type() === 'error') log('[Console error] ' + msg.text());
    });

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ "retry" (cvv: 000)
    log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "retry" (cvv: 000)...');
    await page.fill('input[name="cardNumber"]', '4716934807660821');
    await page.selectOption('select[name="expMonth"]', '01');
    await page.selectOption('select[name="expYear"]', '2030');
    await page.fill('input[name="cvv"]', '000');

    let retryResponse;
    try {
        const [, resp] = await Promise.all([
            page.waitForRequest(req =>
                req.method() === 'POST' && req.url().includes('/order'), { timeout: 15000 }
            ),
            page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 15000 }
            ),
            page.click('form#checkout button[type="submit"]')
        ]);
        retryResponse = resp;
    } catch (e) {
        log('‚ùå [retry] –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥! ' + (e.message || e));
    }

    if (retryResponse) {
        if (retryResponse.status() >= 400) {
            log(`‚ùå [retry] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${retryResponse.status()} ${retryResponse.statusText()}`);
            try {
                const body = await retryResponse.text();
                log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', body);
            } catch {}
        } else {
            let retryJson = {};
            try { retryJson = await retryResponse.json(); } catch {}
            if (retryJson.data?.processing === "retry") {
                log('‚úÖ –°—Ç–∞—Ç—É—Å processing: "retry" –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log(`‚ùå –û–∂–∏–¥–∞–ª–∏ processing: "retry", –ø–æ–ª—É—á–∏–ª–∏: "${retryJson.data?.processing}"`);
            }
        }
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º ---
    async function checkCardNegative({ number, expMonth = '01', expYear = '2030', cvv = '123', expectError, label }) {
        try {
            log(`üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${label}...`);
            await page.fill('input[name="cardNumber"]', number);
            await page.selectOption('select[name="expMonth"]', expMonth);
            await page.selectOption('select[name="expYear"]', expYear);
            await page.fill('input[name="cvv"]', cvv);

            let resp;
            try {
                [resp] = await Promise.all([
                    page.waitForResponse(res =>
                        res.url().includes('/order') && res.request().method() === 'POST', { timeout: 15000 }
                    ),
                    page.click('form#checkout button[type="submit"]')
                ]);
            } catch (e) {
                log(`‚ùå [${label}] –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞! ${e.message || e}`);
                return;
            }

            if (resp.status() >= 400) {
                log(`‚ùå [${label}] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${resp.status()} ${resp.statusText()}`);
                try { log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', await resp.text()); } catch {}
                return;
            }

            let json = {};
            try { json = await resp.json(); } catch {}
            const err = json.fieldErrors?.[0]?.error || '';
            if (err.includes(expectError)) {
                log(`‚úÖ ${label}: –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${err}"`);
            } else {
                log(`‚ùå ${label}: –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É. –ü–æ–ª—É—á–µ–Ω–æ: "${err}"`);
            }
        } catch (err) {
            log(`‚ùå [${label}] –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –≤–Ω–µ –∑–∞–ø—Ä–æ—Å–∞: ${err.message || err}`);
        }
    }

    if (checkType === 'full'){
        await checkCardNegative({
            number: '378282246310005',
            expectError: 'amex credit card is not allowed',
            label: 'AmEx'
        });

        await checkCardNegative({
            number: '30569309025904',
            expectError: 'diners club carte blanche credit card is not supported',
            label: 'Diners Club'
        });

        await checkCardNegative({
            number: '6011111111111117',
            expectError: 'discover credit card is not allowed',
            label: 'Discover'
        });

        await checkCardNegative({
            number: '3530111333300000',
            expectError: 'jcb credit card is not supported',
            label: 'JCB'
        });
    }

    // --- –£—Å–ø–µ—à–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ ---
    log('‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É...');
    await page.fill('input[name="cardNumber"]', '4716934807660821');
    await page.selectOption('select[name="expMonth"]', '01');
    await page.selectOption('select[name="expYear"]', '2030');
    await page.fill('input[name="cvv"]', '123');
    log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: 4716 9348 0766 0821, 01/2030, cvv 123');

    let mainResp;
    try {
        const [request, upsaleState, nav] = await Promise.all([
            page.waitForRequest(req =>
                req.method() === 'POST' && req.url().includes('/order'), { timeout: 15000 }
            ),
            (async () => {
                const state = await checkStateAjax(page, log);
                if (state) log('üü¢ State –ø–æ–ª—É—á–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–ø—Å–µ–π–ª–µ!');
                else log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å state –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–ø—Å–µ–π–ª–µ!');
                return state;
            })(),
            page.click('form#checkout button[type="submit"]'),
            page.waitForNavigation({
                url: url =>
                    /\/upsale-\d+\.html/i.test(url) ||
                    /\/confirmation(\.html)?/i.test(url),
                waitUntil: 'load',
                timeout: 15000
            })
        ]);
        mainResp = request;
    } catch (e) {
        log('‚ùå [Checkout] –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞! ' + (e.message || e));
        // –ù–ï –¥—Ä–æ–ø–∞–µ–º —Ç–µ—Å—Ç, –∏–¥—ë–º –¥–∞–ª—å—à–µ –µ—Å–ª–∏ –Ω–∞–¥–æ
    }

    if (mainResp) {
        let postDataParsed = {};
        const postData = mainResp.postData();
        if (postData) {
            try {
                const params = new URLSearchParams(postData);
                for (const [k, v] of params.entries()) postDataParsed[k] = v;
            } catch (e) {
                postDataParsed = postData;
            }
        }
        if (sendTestInfo) {
            sendTestInfo({
                _section: 'Checkout POST ajax/order',
                data: postDataParsed
            });
        }
        log('‚úÖ POST ajax/order –Ω–∞ —á–µ–∫-–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
        log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å ajax-–∑–∞–ø—Ä–æ—Å –Ω–∞ /order –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã checkout!');
        if (sendTestInfo) {
            sendTestInfo({
                error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å POST ajax/order –Ω–∞ —á–µ–∫–∞—É—Ç–µ!'
            });
        }
    }

    const currentUrl = page.url();

    if (/\/upsale-\d+\.html/i.test(currentUrl)) {
        log(`‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –∞–ø—Å–µ–π–ª: ${currentUrl}`);
    } else if (/\/confirmation(\.html)?/i.test(currentUrl)) {
        log(`‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ confirmation: ${currentUrl}`);
    } else {
        log('‚ùå –ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∏ –Ω–∞ –∞–ø—Å–µ–π–ª, –Ω–∏ –Ω–∞ confirmation-—Å—Ç—Ä–∞–Ω–∏—Ü—É!');
        if (sendTestInfo) {
            sendTestInfo({
                error: '‚ùå –ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∏ –Ω–∞ –∞–ø—Å–µ–π–ª, –Ω–∏ –Ω–∞ confirmation-—Å—Ç—Ä–∞–Ω–∏—Ü—É!',
                url: currentUrl
            });
        }
    }
};
