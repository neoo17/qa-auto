/**
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {Function} [sendTestInfo]
 * @param {Function} [checkStateAjax]
 * @param {string} checkType
 */
module.exports = async function checkCheckoutForm(page, log, sendTestInfo, checkStateAjax, checkType) {
    let declinePopupWasClosed = false;

    async function waitLoaderGone(page, timeout = 12000) {
        const selectors = [
            '#proc_popup',
            '.loading',
            '.loader',
        ];
        const start = Date.now();
        while (Date.now() - start < timeout) {
            const anyVisible = await page.evaluate((sels) => {
                for (const sel of sels) {
                    const el = document.querySelector(sel);
                    if (el) {
                        const style = window.getComputedStyle(el);
                        if (style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0') {
                            return true;
                        }
                    }
                }
                return false;
            }, selectors);
            if (!anyVisible) return;
            await page.waitForTimeout(100);
        }
        log('‚ö†Ô∏è Loader –Ω–µ –∏—Å—á–µ–∑ –∑–∞ 12 —Å–µ–∫—É–Ω–¥! –ñ–º—ë–º –∫–Ω–æ–ø–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.');
    }

    // –ü–æ–ø–∞–ø –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ –≤–µ—Å—å —Ç–µ—Å—Ç
    async function closeDeclinePopupIfVisible(page) {
        if (declinePopupWasClosed) return;
        try {
            await page.waitForSelector('.decline-popup-shopify', { state: 'visible', timeout: 250 });
            await page.click('.decline-popup-shopify .close-popup-1', { timeout: 250 }).catch(() => {});
            await page.waitForSelector('.decline-popup-shopify', { state: 'hidden', timeout: 250 }).catch(() => {});
            log('‚ö°Ô∏è –ó–∞–∫—Ä—ã–ª–∏ Shopify Decline popup');
            declinePopupWasClosed = true;
        } catch {
            // –ü–æ–ø–∞–ø –Ω–µ –ø–æ—è–≤–∏–ª—Å—è ‚Äî¬†–æ–∫–µ–π
        }
    }

    log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É #checkout...');
    await page.waitForSelector('form#checkout', { timeout: 7000 });

    // --- –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ 400 ---
    page.on('console', msg => {
        if (
            msg.type() === 'error'
            && msg.text().includes('Failed to load resource: the server responded with a status of 400')
        ) {
            return;
        }
        if (msg.type() === 'error') log('[Console error] ' + msg.text());
    });
    page.on('pageerror', err => log('[JS error] ' + err));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ "retry" (cvv: 000)
    log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "retry" (cvv: 000)...');
    await page.fill('input[name="cardNumber"]', '4716934807660821');
    await page.selectOption('select[name="expMonth"]', '01');
    await page.selectOption('select[name="expYear"]', '2030');
    await page.fill('input[name="cvv"]', '000');
    await waitLoaderGone(page);

    let retryResponse;
    try {
        const [, resp, resp3ds] = await Promise.all([
            page.waitForRequest(req =>
                req.method() === 'POST' && req.url().includes('/order'), { timeout: 5000 }
            ),
            page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 5000 }
            ),
            page.waitForResponse(res =>
                res.url().includes('/add-order-3ds-key') && res.request().method() === 'POST', { timeout: 5000 }
            ).catch(() => null),
            page.click('form#checkout button[type="submit"]')
        ]);
        retryResponse = resp3ds || resp;
    } catch (e) {
        log('‚ùå [retry] –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥! ' + (e.message || e));
    }

    await closeDeclinePopupIfVisible(page); // –ü–æ—Å–ª–µ retry –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–ø!

    if (retryResponse) {
        if (retryResponse.status() >= 400) {
            log(`‚ùå [retry] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${retryResponse.status()} ${retryResponse.statusText()}`);
            try {
                const body = await retryResponse.text();
                log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', body);
            } catch {}
        } else {
            let retryJson = {};
            try { retryJson = await retryResponse.json(); } catch {}
            if (retryJson.data?.processing === "retry") {
                log('‚úÖ –°—Ç–∞—Ç—É—Å processing: "retry" –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log(`‚ùå –û–∂–∏–¥–∞–ª–∏ processing: "retry", –ø–æ–ª—É—á–∏–ª–∏: "${retryJson.data?.processing}"`);
            }
        }
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º ---
    async function checkCardNegative({ number, expMonth = '01', expYear = '2030', cvv = '123', expectError, label }) {
        try {
            log(`üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${label}...`);
            await page.fill('input[name="cardNumber"]', number);
            await page.selectOption('select[name="expMonth"]', expMonth);
            await page.selectOption('select[name="expYear"]', expYear);
            await page.fill('input[name="cvv"]', cvv);

            await waitLoaderGone(page);

            const orderRespPromise = page.waitForResponse(res =>
                res.url().includes('/order') && res.request().method() === 'POST', { timeout: 5000 }
            ).catch(() => null);

            const add3dsRespPromise = page.waitForResponse(res =>
                res.url().includes('/add-order-3ds-key') && res.request().method() === 'POST', { timeout: 5000 }
            ).catch(() => null);

            const paay3dsPromise = page.waitForResponse(res =>
                res.url().includes('3dsintegrator.com/v2.2/authenticate/browser') &&
                res.request().method() === 'POST', { timeout: 7000 }
            ).catch(() => null);

            await page.click('form#checkout button[type="submit"]');

            const [orderResp, add3dsResp, paay3dsResp] = await Promise.all([
                orderRespPromise,
                add3dsRespPromise,
                paay3dsPromise
            ]);

            // –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø (–µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –∏ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ)
            await closeDeclinePopupIfVisible(page);

            // --- –û–¢–í–ï–¢ –û–¢ 3DSINTEGRATOR ---
            if (paay3dsResp && paay3dsResp.status() === 400) {
                let body = await paay3dsResp.text();
                let errorText = '';
                try {
                    let asJson = JSON.parse(body);
                    if (asJson && asJson.error) {
                        errorText = asJson.error;
                    }
                } catch {}

                if (errorText && expectError && errorText.includes(expectError)) {
                    log(`‚úÖ ${label}: –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${errorText}"`);
                    return;
                }
                if (!errorText && (!body || body.trim() === "")) {
                    log(`‚úÖ ${label}: –ü–æ–ª—É—á–∏–ª decline –æ—Ç PAAY 3ds`);
                    return;
                }
                log(`‚úÖ ${label}: –ü–æ–ª—É—á–∏–ª decline –æ—Ç PAAY 3ds (error: "${errorText || body}")`);
                return;
            }

            // --- fallback –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ajax ---
            let resp = add3dsResp || orderResp;
            if (!resp) {
                log(`‚úÖ ${label}: –ü–æ–ª—É—á–∏–ª decline –æ—Ç PAAY 3ds`);
                return;
            }

            if (resp.status() >= 400) {
                let body = await resp.text();
                let errorText = '';
                let isJson = false;
                try {
                    let asJson = JSON.parse(body);
                    isJson = true;
                    if (asJson && asJson.fieldErrors && asJson.fieldErrors.length) {
                        errorText = asJson.fieldErrors[0].error || '';
                    }
                } catch {}
                if (errorText && expectError && errorText.includes(expectError)) {
                    log(`‚úÖ ${label}: –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${errorText}"`);
                    return;
                }
                if (!errorText && !isJson && (!body || body.trim() === "")) {
                    log(`‚úÖ ${label}: –ü–æ–ª—É—á–∏–ª decline –æ—Ç PAAY 3ds`);
                    return;
                }
                log(`‚ùå ${label}: –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É. –ü–æ–ª—É—á–µ–Ω–æ: "${errorText || body}"`);
                return;
            }

            // –û–±—ã—á–Ω–∞—è success-–≤–∞–ª–∏–¥–∞—Ü–∏—è
            let json = {};
            try { json = await resp.json(); } catch {}
            const err = json.fieldErrors?.[0]?.error || '';
            if (err.includes(expectError)) {
                log(`‚úÖ ${label}: –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: "${err}"`);
            } else {
                log(`‚ùå ${label}: –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É. –ü–æ–ª—É—á–µ–Ω–æ: "${err}"`);
            }
        } catch (err) {
            log(`‚ùå [${label}] –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –≤–Ω–µ –∑–∞–ø—Ä–æ—Å–∞: ${err.message || err}`);
        }
    }

    if (checkType === 'full'){
        await checkCardNegative({
            number: '378282246310005',
            expectError: 'amex credit card is not allowed',
            label: 'AmEx'
        });

        await checkCardNegative({
            number: '30569309025904',
            expectError: 'diners club carte blanche credit card is not supported',
            label: 'Diners Club'
        });

        await checkCardNegative({
            number: '6011111111111117',
            expectError: 'discover credit card is not allowed',
            label: 'Discover'
        });

        await checkCardNegative({
            number: '3530111333300000',
            expectError: 'jcb credit card is not supported',
            label: 'JCB'
        });
    }

    // --- –£—Å–ø–µ—à–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ ---
    log('‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É...');
    await page.fill('input[name="cardNumber"]', '4716934807660821');
    await page.selectOption('select[name="expMonth"]', '01');
    await page.selectOption('select[name="expYear"]', '2030');
    await page.fill('input[name="cvv"]', '123');
    await waitLoaderGone(page);
    log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: 4716 9348 0766 0821, 01/2030, cvv 123');

    let mainResp, add3dsReq, ds3Resp;
    try {
        const orderReqPromise = page.waitForRequest(req =>
            req.method() === 'POST' && req.url().includes('/order'), { timeout: 5000 }
        ).catch(() => null);

        const add3dsReqPromise = page.waitForRequest(req =>
            req.method() === 'POST' && req.url().includes('/add-order-3ds-key'), { timeout: 5000 }
        ).catch(() => null);

        const ds3ReqPromise = page.waitForRequest(req =>
            req.method() === 'POST' && req.url().includes('3dsintegrator.com'), { timeout: 5000 }
        ).catch(() => null);

        const ds3RespPromise = page.waitForResponse(res =>
            res.url().includes('3dsintegrator.com') && res.request().method() === 'POST', { timeout: 5000 }
        ).catch(() => null);

        const statePromise = (async () => {
            const state = await checkStateAjax(page, log);
            if (state) log('üü¢ State –ø–æ–ª—É—á–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–ø—Å–µ–π–ª–µ!');
            else log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å state –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–ø—Å–µ–π–ª–µ!');
            return state;
        })();

        const navPromise = page.waitForNavigation({
            url: url =>
                /\/upsale-\d+\.html/i.test(url) ||
                /\/confirmation(\.html)?/i.test(url),
            waitUntil: 'load',
            timeout: 7000
        }).catch(() => null);

        await page.click('form#checkout button[type="submit"]');

        const [orderReq, add3dsRequest, ds3Request, ds3Response, upsaleState, nav] = await Promise.all([
            orderReqPromise,
            add3dsReqPromise,
            ds3ReqPromise,
            ds3RespPromise,
            statePromise,
            navPromise
        ]);

        mainResp = orderReq;
        add3dsReq = add3dsRequest;
        ds3Resp = ds3Response;

        if (ds3Resp && ds3Resp.status() === 400) {
            try {
                const ds3Json = await ds3Resp.json();
                if (ds3Json.error) {
                    log(`‚ùå –î–µ–∫–ª–∞–π–Ω –æ—Ç 3DS: "${ds3Json.error}"`);
                    if (sendTestInfo) {
                        sendTestInfo({
                            _section: '3DS Error',
                            error: ds3Json.error,
                            data: ds3Json
                        });
                    }
                }
            } catch (e) {}
        }

        if (add3dsReq) {
            log('‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ ajax/add-order-3ds-key');
        }

        if (ds3Request) {
            log('‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ 3dsintegrator.com');
        }
    } catch (e) {
        log('‚ùå [Checkout] –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞! ' + (e.message || e));
    }

    if (mainResp) {
        let postDataParsed = {};
        const postData = mainResp.postData();
        if (postData) {
            try {
                const params = new URLSearchParams(postData);
                for (const [k, v] of params.entries()) postDataParsed[k] = v;
            } catch (e) {
                postDataParsed = postData;
            }
        }
        if (sendTestInfo) {
            sendTestInfo({
                _section: 'Checkout POST ajax/order',
                data: postDataParsed
            });
        }
        log('‚úÖ POST ajax/order –Ω–∞ —á–µ–∫-–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
        log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å ajax-–∑–∞–ø—Ä–æ—Å –Ω–∞ /order –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã checkout!');
        if (sendTestInfo) {
            sendTestInfo({
                error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å POST ajax/order –Ω–∞ —á–µ–∫–∞—É—Ç–µ!'
            });
        }
    }

    if (add3dsReq) {
        let requestData = {};
        const postData = add3dsReq.postData();
        if (postData) {
            try {
                const params = new URLSearchParams(postData);
                for (const [k, v] of params.entries()) requestData[k] = v;
            } catch (e) {
                requestData = postData;
            }
        }
        let responseData = {};
        if (sendTestInfo) {
            sendTestInfo({
                _section: 'Checkout POST ajax/add-order-3ds-key',
                data: requestData,
                response: responseData
            });
        }
        log('‚úÖ POST ajax/add-order-3ds-key –Ω–∞ —á–µ–∫-–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }

    const currentUrl = page.url();

    if (/\/upsale-\d+\.html/i.test(currentUrl)) {
        log(`‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –∞–ø—Å–µ–π–ª: ${currentUrl}`);
    } else if (/\/confirmation(\.html)?/i.test(currentUrl)) {
        log(`‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ confirmation: ${currentUrl}`);
    } else {
        log('‚ùå –ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∏ –Ω–∞ –∞–ø—Å–µ–π–ª, –Ω–∏ –Ω–∞ confirmation-—Å—Ç—Ä–∞–Ω–∏—Ü—É!');
        if (sendTestInfo) {
            sendTestInfo({
                error: '‚ùå –ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∏ –Ω–∞ –∞–ø—Å–µ–π–ª, –Ω–∏ –Ω–∞ confirmation-—Å—Ç—Ä–∞–Ω–∏—Ü—É!',
                url: currentUrl
            });
        }
    }
};
