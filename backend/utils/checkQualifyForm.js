// checkQualifyForm.js
const fieldsConfig = require('./fieldLabelsConfig.js');
const QUALIFY_FIELDS = ['firstName', 'lastName', 'email', 'phone'];

/**
 * @param {import('playwright').Page} page
 * @param {Function} log
 * @param {string} countryCode
 * @param {string} partner
 */

module.exports = async function checkQualifyForm(page, log, countryCode, partner) {
    log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã #qualify...');
    await page.waitForSelector('form#qualify', { timeout: 7000 });

    const couponSelector = 'span.coupon';
    const couponExists = await page.$(couponSelector);

    if (couponExists) {
        const couponValue = await page.$eval(couponSelector, el => el.textContent.trim());
        log(`üßæ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫—É–ø–æ–Ω: "${couponValue}"`);

        if (['dnav3', 'newdna'].includes(partner)) {
            if (couponValue === 'DA25171525') {
                log('‚úÖ –ö—É–ø–æ–Ω –¥–ª—è dnav3/newdna –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: DA25171525');
            } else {
                log(`‚ùå –ö—É–ø–æ–Ω –¥–ª—è dnav3/newdna –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "DA25171525", –∞ —Å–µ–π—á–∞—Å "${couponValue}"`);
            }
        }
        if (['hg', 'ga'].includes(partner)) {
            if (couponValue === 'BS31910296') {
                log('‚úÖ –ö—É–ø–æ–Ω –¥–ª—è hg/ga –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: BS31910296');
            } else {
                log(`‚ùå –ö—É–ø–æ–Ω –¥–ª—è hg/ga –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "BS31910296", –∞ —Å–µ–π—á–∞—Å "${couponValue}"`);
            }
        }
    } else {
        log('‚ÑπÔ∏è –ö—É–ø–æ–Ω <span class="coupon">BS31910296</span> –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)');
    }


    log(`üåé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–π–±–ª—ã –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è QUALIFY (${countryCode})`);
    const config = fieldsConfig[countryCode];
    if (!config) {
        log(`‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã "${countryCode}" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É`);
    } else {
        for (const name of QUALIFY_FIELDS) {
            const { label, placeholder, type } = config[name];
            const inputSel = `form#qualify input[name="${name}"]`;

            // Label
            let actualLabel = null;
            try {
                actualLabel = await page.$eval(`${inputSel} >> xpath=../../label`, el => el.textContent.trim());
            } catch {
                actualLabel = null;
            }
            if (actualLabel !== label) {
                log(`‚ùå Label –¥–ª—è "${name}" –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: "${label}", –ø–æ–ª—É—á–∏–ª–∏: "${actualLabel}"`);
            } else {
                log(`‚úÖ Label –¥–ª—è "${name}" —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${label}"`);
            }

            // Placeholder
            let actualPlaceholder = null;
            try {
                actualPlaceholder = await page.$eval(inputSel, el => el.getAttribute('placeholder'));
            } catch {
                actualPlaceholder = null;
            }
            if (actualPlaceholder !== placeholder) {
                log(`‚ùå Placeholder –¥–ª—è "${name}" –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: "${placeholder}", –ø–æ–ª—É—á–∏–ª–∏: "${actualPlaceholder}"`);
            } else {
                log(`‚úÖ Placeholder –¥–ª—è "${name}" —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${placeholder}"`);
            }

            // Type
            let actualType = null;
            try {
                actualType = await page.$eval(inputSel, el => el.getAttribute('type'));
            } catch {
                actualType = null;
            }
            if (actualType !== type) {
                log(`‚ùå Type –¥–ª—è "${name}" –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: "${type}", –ø–æ–ª—É—á–∏–ª–∏: "${actualType}"`);
            } else {
                log(`‚úÖ Type –¥–ª—è "${name}" —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${type}"`);
            }
        }
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ required, –ø—É—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ ---
    log('üö´ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É...');
    await page.click('form#qualify button[type="submit"]');
    await page.waitForTimeout(800);

    let stillHere = await page.isVisible('form#qualify');
    if (stillHere) {
        log('‚úÖ –§–æ—Ä–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
        log('‚ùå –§–æ—Ä–º–∞ –∏—Å—á–µ–∑–ª–∞ ‚Äî –±–∞–≥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã');
    }

    const invalidEmails = ['test@', 'bad.email', '@domain.com', '.user@gmail.com', 'user.@gmail.com', 'us..er@gmail.com'];
    for (const bad of invalidEmails) {
        await page.fill('input[name="firstName"]', 'Test');
        await page.fill('input[name="lastName"]', 'Test');
        await page.fill('input[name="email"]', bad);
        await page.fill('input[name="phone"]', '123456');
        log(`üö´ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º email: "${bad}"`);
        await page.click('form#qualify button[type="submit"]');
        await page.waitForTimeout(700);
        stillHere = await page.isVisible('form#qualify');
        if (stillHere) {
            log('‚úÖ –§–æ—Ä–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω');
        } else {
            log(`‚ùå –§–æ—Ä–º–∞ —É—à–ª–∞ ‚Äî –±–∞–≥ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email: "${bad}"`);
            return;
        }
        await page.fill('input[name="email"]', '');
    }

    await page.fill('input[name="firstName"]', 'Ivan');
    await page.fill('input[name="lastName"]', 'Ivanov');
    await page.fill('input[name="email"]', 'user1_2-3@subdomain.test.com');
    await page.fill('input[name="phone"]', '8888888888');
};
